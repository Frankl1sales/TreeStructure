class Node {
    data: number;
    left: Node | null;
    right: Node | null;

    constructor(data: number) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

// Função para criar a árvore binária
function createBinaryTree(): Node {
    const root = new Node(1);        // Raiz da árvore
    root.left = new Node(2);         // Nó esquerdo
    root.right = new Node(3);        // Nó direito
    root.left.left = new Node(4);    // Filho esquerdo do nó 2
    root.left.right = new Node(5);   // Filho direito do nó 2

    return root; // Retorna a árvore binária
}

// Função para converter a árvore binária para a estrutura com "value" e "children"
function convertToTreeNode(binaryNode: Node | null): any {
    if (binaryNode === null) return null;

    // Converte o nó binário para a estrutura de árvore com "value" e "children"
    return {
        value: binaryNode.data.toString(),
        children: [
            convertToTreeNode(binaryNode.left), // Filho esquerdo
            convertToTreeNode(binaryNode.right), // Filho direito
        ].filter(child => child !== null), // Remove nós nulos (caso não tenha filhos)
    };
}

// Criando a árvore binária
const rootNodeBinary = createBinaryTree();

// Convertendo a árvore binária para a estrutura desejada
const rootNode = convertToTreeNode(rootNodeBinary);

// Retornando a estrutura da árvore
rootNode;



http://127.0.0.1:5500/index.html
